#!/bin/bash

# Colors
RED='\033[0;31m'
NC='\033[0m' # No Color

# Variables
appsFolder=path/to/apk/files/directory # the full path is prefered
filesFolder=output/result/files/directory # full path is prefered
sharedFolder=/data/app/share # Just a temporary directory that will be created in the device, you can just leave it as it is.

function startAnalysis {
	adb shell input keyevent 3 > /dev/null

	adb shell dumpsys connectivity | grep "VALIDATED" >> /dev/null
	if [ $? -eq 1 ]; then
		echo "Waiting for internet connection .."
		adb shell dumpsys connectivity | grep "VALIDATED" >> /dev/null
		while [ $? -eq 1 ]; do
			adb shell 'svc wifi disable'
			adb shell 'svc wifi enable'
			adb shell dumpsys wifi | grep "CONNECTED/CONNECTED" >> /dev/null
			while [ $? -eq 1 ]; do
				sleep 2
				adb shell dumpsys wifi | grep "CONNECTED/CONNECTED" >> /dev/null
			done
			sleep 5
			adb shell dumpsys connectivity | grep "VALIDATED" >> /dev/null
		done
		echo "Internet established"
	fi

	line=$(aapt dump badging $appsFolder$name | grep "package: name")
	semiLine=$(echo $line | cut -d "=" -f 2)
	pack=$(echo $semiLine | cut -d " " -f 1)
	package=$(echo ${pack//\'})

	echo -e "\n("$appCount"/"$filesNumber") Analyzing app: ${RED}"$package"${NC}"
	appFullName=$name
	appName=$package

	#Start the script ..
	adb shell pm clear $appName > /dev/null
	if [ $? -eq 0 ]; then
		adb uninstall $appName > /dev/null
	fi
	adb install $appsFolder$appFullName
	if [ $? -eq 0 ]; then
		adb shell monkey -p $appName -c android.intent.category.LAUNCHER 1 > /dev/null
		sleep 2
		adb shell input keyevent 23 > /dev/null
		adb shell input keyevent 23 > /dev/null
		sleep 2
		adb shell input keyevent 23 > /dev/null
		adb shell input keyevent 23 > /dev/null
		sleep 2
		# you cal also use
		# appID=$($adb shell pidof $appName)
		# in place of the next three lines
		searchID=$(adb shell ps "|" grep -w $appName)
		arr=($searchID)
		appID=${arr[1]}
		iiid=$(echo $appID |tr '\n' 'a')
		if [ $iiid = "a" ]; then
			echo $appName" Crashed!"
			cptCrashedApps=$((cptCrashedApps+1))
			adb shell pm clear $appName > /dev/null
			adb uninstall $appName > /dev/null
			# python3 onlyName.py $name
		else
			# echo -e "${RED}App ID is ${NC}"$appID
			adb shell strace -p $appID -o $sharedFolder/system.txt &
			sleep 3
			adb shell monkey --ignore-crashes -p $appName -v 1000 > /dev/null
			adb shell pm clear $appName > /dev/null
			adb uninstall $appName > /dev/null
			echo "Application uninstalled."
			adb pull $sharedFolder/system.txt $filesFolder/ > /dev/null
			echo "File system.txt pulled!"
			adb shell rm $sharedFolder/system.txt
			python3 getSystemCalls.py $name
			rm $filesFolder/system.txt
			if [ $? -eq 0 ]; then
				echo "Analysed successfully ^^"
			fi
		fi
	else
		echo "Install failed!"
		cptInstallationsFailed=$((cptInstallationsFailed+1))
	fi
}

adb shell mkdir $sharedFolder
cptInstallationsFailed=0
cptCrashedApps=0
names=$(ls $appsFolder)
namesR=($names)
filesNumber=$(echo ${#namesR[@]})
appCount=0
numberOfAnalysed=$(wc -l < $filesFolder/systemCalls.txt)

if [ $numberOfAnalysed -gt "0" ]; then
	lastLine=$(tail -1 $filesFolder/systemCalls.txt)
	lastAnalysed=$(echo $lastLine| cut -d':' -f 1)
	trouve=false
	for name in $names; do
		appCount=$((appCount+1))
		if [ "$trouve" = true ]; then
			startAnalysis
		else
			if [ "$lastAnalysed" = "$name" ]; then
				trouve=true
				echo -e "\n#==================================================================#"
				echo -e "Resuming analysis, last analysed app: ${RED}"$name"${NC}"
			fi
		fi
	done
else
	for name in $names; do
		appCount=$((appCount+1))
		startAnalysis
	done
fi

echo $cptInstallationsFailed" installation failed!"
echo $cptCrashedApps" apps crashed!"