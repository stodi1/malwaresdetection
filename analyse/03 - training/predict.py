
import pandas as pd
import numpy as np
import tensorflow as tf

# File that contains data to predict their classes
csvData = "data/newData.csv"
model = "/tmp/cnn_models/cnnModel001" # "savedModel"

def cnn_model_fn(features, labels, mode):
  input_layer = tf.reshape(features["x"], [-1, 244, 244, 1])

  conv1 = tf.layers.conv2d(
      inputs=input_layer,
      filters=32,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)

  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[6, 6], strides=6)

  conv2 = tf.layers.conv2d(
      inputs=pool1,
      filters=64,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)

  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[6, 6], strides=6)

  pool2_flat = tf.reshape(pool2, [-1, 6 * 6 * 64])

  dense = tf.layers.dense(inputs=pool2_flat, units=244*244, activation=tf.nn.relu)

  dropout = tf.layers.dropout(
      inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)

  logits = tf.layers.dense(inputs=dropout, units=2)

  predictions = {
      "classes": tf.argmax(input=logits, axis=1),
      "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
  }
  if mode == tf.estimator.ModeKeys.PREDICT:
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)

  # Calculate Loss (for both TRAIN and EVAL modes)
  onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=2)
  loss = tf.losses.softmax_cross_entropy(
      onehot_labels=onehot_labels, logits=logits)

  # Configure the Training Op (for TRAIN mode)
  if mode == tf.estimator.ModeKeys.TRAIN:
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
    train_op = optimizer.minimize(
        loss=loss,
        global_step=tf.train.get_global_step())
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)

  # Add evaluation metrics (for EVAL mode)
  eval_metric_ops = {
      "accuracy": tf.metrics.accuracy(
          labels=labels, predictions=predictions["classes"])}
  return tf.estimator.EstimatorSpec(
      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)

mnist_classifier = tf.estimator.Estimator(
      model_fn=cnn_model_fn,
      model_dir=model)

# Classify new samples.
def new_samples():
	data = pd.read_csv(csvData, index_col=None, header=None)
	data = data.values.astype(np.float32)
	return data

predict_input_fn = tf.estimator.inputs.numpy_input_fn(
      x={"x": new_samples()},
      num_epochs=1,
      batch_size=128,
      shuffle=False)

predictions = list(mnist_classifier.predict(input_fn=predict_input_fn))
predicted_classes = [p["classes"] for p in predictions]
# print(predictions)
for i in range(new_samples().shape[0]):
	print("Sample #%d, Class: %d, probability: %.3f" %(i+1, predictions[i]['classes'], predictions[i]['probabilities'][predictions[i]['classes']]))
print("Class 0 = Goodware, Class 1 = Malware")
# print("New Samples, Class Predictions:    {}\n"
#       .format(predictions))
