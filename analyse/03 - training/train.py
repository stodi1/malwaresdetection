
# import pandas as pd
import numpy as np
import tensorflow as tf

csvData = "data/train.csv"
modelDir = "/tmp/cnn_models/cnnModel001"

def cnn_model_fn(features, labels, mode):
  input_layer = tf.reshape(features["x"], [-1, 244, 244, 1])

  conv1 = tf.layers.conv2d(
      inputs=input_layer,
      filters=32,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)

  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[6, 6], strides=6)

  conv2 = tf.layers.conv2d(
      inputs=pool1,
      filters=64,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)

  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[6, 6], strides=6)

  pool2_flat = tf.reshape(pool2, [-1, 6 * 6 * 64])

  dense = tf.layers.dense(inputs=pool2_flat, units=244*244, activation=tf.nn.relu)

  dropout = tf.layers.dropout(
      inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)

  logits = tf.layers.dense(inputs=dropout, units=2)

  predictions = {
      "classes": tf.argmax(input=logits, axis=1),
      "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
  }
  if mode == tf.estimator.ModeKeys.PREDICT:
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)

  # Calculate Loss (for both TRAIN and EVAL modes)
  onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=2)
  loss = tf.losses.softmax_cross_entropy(
      onehot_labels=onehot_labels, logits=logits)

  # Configure the Training Op (for TRAIN mode)
  if mode == tf.estimator.ModeKeys.TRAIN:
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
    train_op = optimizer.minimize(
        loss=loss,
        global_step=tf.train.get_global_step())
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)

  # Add evaluation metrics (for EVAL mode)
  eval_metric_ops = {
      "accuracy": tf.metrics.accuracy(
          labels=labels, predictions=predictions["classes"])}
  return tf.estimator.EstimatorSpec(
      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)

def main(unused_argv):

  # Load datasets.
  DATA = tf.contrib.learn.datasets.base.load_csv_with_header(
	  filename=csvData,
	  target_dtype=np.int,
	  features_dtype=np.float32)

  my_checkpointing_config = tf.estimator.RunConfig(
      save_checkpoints_steps = 5,
      # save_checkpoints_secs = 30*60,  # Save checkpoints every 20 minutes.
      keep_checkpoint_max = 1,       # Retain the 2 most recent checkpoints.
  )

  # Create the Estimator
  mnist_classifier = tf.estimator.Estimator(
      model_fn=cnn_model_fn,
      model_dir=modelDir,
      config=my_checkpointing_config)

  # Set up logging for predictions
  # Log the values in the "Softmax" tensor with label "probabilities"
  tensors_to_log = {"probabilities": "softmax_tensor"}
  logging_hook = tf.train.LoggingTensorHook(
      tensors=tensors_to_log, every_n_iter=5)

  train_input_fn = tf.estimator.inputs.numpy_input_fn(
      x={"x": np.array(DATA.data)},
      y=np.array(DATA.target),
      num_epochs=10,
      batch_size=50,
      shuffle=True)

  mnist_classifier.train(
      input_fn=train_input_fn,
      steps=50,
      hooks=[logging_hook])

  print("DONE!")

if __name__ == "__main__":
  tf.app.run()
