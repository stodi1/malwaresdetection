
import subprocess

filesFolder = "/Users/Abdou/Desktop/PFE_GUETTAF_ABADA/scripts/myPythonScripts/usedScripts/systemCalls/"
outputDir = "/Users/Abdou/Desktop/PFE_GUETTAF_ABADA/scripts/myPythonScripts/usedScripts/tensorflowInputs/"
fileName = "system.txt"

def getSystemCallsSequence(file):
    scTable = []
    for line in file:
        if line.find('(') > 0:
            systemCallName = line.split('(')[0]
            scTable.append(systemCallName)
    return scTable

def countLinesNumber(fname):
	with open(fname) as f:
		for i, l in enumerate(f):
			pass
		return i + 1

def getEachSystemCallOnce(table):
    newTable = []
    for i in range(len(table)):
        if table[i] not in newTable:
            newTable.append(table[i])
    return newTable

def getDependencies(onceTable, sequenceTable):
    dependency2DTable = []
    for systemCall in onceTable:
        nestedTable = [0] * len(onceTable)
        i = sequenceTable.index(systemCall)
        for sc in range(sequenceTable.index(systemCall) + 1, len(sequenceTable)):
            if sequenceTable[sc] != systemCall:
                nestedTable[onceTable.index(sequenceTable[sc])] += 1 / (sc - i)
            else:
                i = sc
        dependency2DTable.append(nestedTable)
    return dependency2DTable

def fillGlobalMatrix(dependenciesTables, namesTable):
    globalMatrix = ['getuid32','getuid','getgid32','getgid','geteuid32','geteuid','getegid32','getegid','getresuid32','getresuid','getresgid32','getresgid','readahead','getgroups32','getgroups','getpgid','getppid','getsid','setsid','setgid32','setgid','setuid32','setuid','setreuid32','setreuid','setresuid32','setresuid','setresgid32','setresgid','brk','kill','tgkill','ptrace','getrusage','getpriority','setpriority','ugetrlimit','getrlimit','getrlimit64','setrlimit','setrlimit64','prlimit','prlimit64','setgroups32','setgroups','setpgid','setregid32','setregid','chroot','prctl','arch_prctl','capget','capset','sigaltstack','acct','read','write','pread64','pread','pwrite64','pwrite','preadv','preadv64','pwritev','pwritev64','close','getpid','munmap','mremap','msync','mprotect','madvise','mlock','munlock','mlockall','munlockall','mincore','ioctl','readv','writev','fcntl64','fcntl','flock','fchmod','dup','pipe2','dup3','fsync','fdatasync','fchown32','fchown','sync','syncfs','fsetxattr','fgetxattr','flistxattr','fremovexattr','getdents64','futex','clone','openat','faccessat','fchmodat','fchownat','fstatat64','newfstatat','linkat','mkdirat','mknodat','readlinkat','renameat','symlinkat','unlinkat','utimensat','lseek','_llseek','lseek64','ftruncate64','ftruncate','sendfile','sendfile64','sendfile64','truncate','truncate64','mmap2','mmap64','fallocate','fallocate64','fadvise64_64','fadvise64','fstatfs64','fstatfs','statfs64','statfs','fstat64','fstat','chdir','mount','umount2','getcwd','fchdir','setxattr','lsetxattr','getxattr','lgetxattr','listxattr','llistxattr','removexattr','lremovexattr','swapon','swapoff','settimeofday','times','nanosleep','clock_settime','clock_getres','clock_nanosleep','getitimer','setitimer','timer_create','timer_settime','timer_gettime','timer_getoverrun','timer_delete','timerfd_create','timerfd_settime','timerfd_gettime','adjtimex','clock_adjtime','sigaction','rt_sigaction','rt_sigpending','rt_sigprocmask','rt_sigsuspend','rt_sigtimedwait','rt_sigqueueinfo','signalfd4','socket','socketpair','bind','connect','listen','accept4','getsockname','getpeername','sendto','recvfrom','shutdown','setsockopt','getsockopt','recvmsg','sendmsg','recvmmsg','sendmmsg','sched_setscheduler','sched_getscheduler','sched_yield','sched_setparam','sched_getparam','sched_get_priority_max','sched_get_priority_min','sched_rr_get_interval','sched_setaffinity','setns','unshare','sched_getaffinity','getcpu','uname','umask','reboot','init_module','delete_module','syslog','sysinfo','personality','tee','splice','vmsplice','epoll_create1','epoll_ctl','epoll_pwait','eventfd2','exit_group','exit','inotify_init1','inotify_add_watch','inotify_rm_watch','pselect6','ppoll','process_vm_readv','process_vm_writev','quotactl','set_tid_address','setfsgid','setfsuid','setdomainname','sethostname','sync_file_range','wait4','waitid','set_thread_area','clock_gettime','gettimeofday','getrandom']
    dependencies = [0] * len(globalMatrix)
    fullDependencies = []          
    for n in range(len(globalMatrix)):
        fullDependencies.append([0] * len(globalMatrix))
    for systemCallName in namesTable:
        if (systemCallName in globalMatrix):
            dependencies = [0] * len(globalMatrix)
            for j in range(len(namesTable)):
                if namesTable[j] in globalMatrix:
                    dependencies[globalMatrix.index(namesTable[j])] = dependenciesTables[namesTable.index(systemCallName)][j]
            fullDependencies[globalMatrix.index(systemCallName)] = dependencies
    return fullDependencies

def addToDataSet(dependencies, fileName):
    with open(fileName, 'w+') as file:
        v = 0
        for vector in dependencies:
            v += 1
            v2 = 0
            for value in vector:
                v2 += 1
                if value > 0:
                    file.write('%f' %value)
                else:
                    file.write('0')
                if v < len(dependencies) or v2 < len(vector):
                    file.write(',')

with open('%s/%s' %(filesFolder,fileName)) as scFile:
    tab = getSystemCallsSequence(scFile)

systemcallOnce = getEachSystemCallOnce(tab)
dependencies = getDependencies(systemcallOnce, tab)
globalMatrix = fillGlobalMatrix(dependencies, systemcallOnce)
addToDataSet(globalMatrix, '%stensorInput.csv' %outputDir)
