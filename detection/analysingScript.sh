#!/bin/bash

# Colors
RED='\033[0;31m'
NC='\033[0m' # No Color

# Variables
scriptsFolder=/Users/Abdou/Desktop/PFE_GUETTAF_ABADA/scripts/myPythonScripts/usedScripts/
appsFolder=/Applications/MAMP/htdocs/EasySafe/Applications/
filesFolder=/Users/Abdou/Desktop/PFE_GUETTAF_ABADA/scripts/myPythonScripts/usedScripts/systemCalls
sharedFolder=/data/app/share
name=$1
token=$2
adb=/Users/Abdou/Library/Android/sdk/platform-tools/adb
aapt=/Users/Abdou/Library/Android/sdk/build-tools/25.0.0/aapt

function startAnalysis {
	$adb shell input keyevent 3 > /dev/null

	# If ou are using an Ubuntu-based system, consider using
	# grep "VALIDATED" insted of grep "lastValidated{true}"
	# in the folowing three grep commands
	# Like the following line
	# adb shell dumpsys connectivity | grep "VALIDATED" >> /dev/null
	$adb shell dumpsys connectivity | grep "lastValidated{true}" >> /dev/null
	if [ $? -eq 1 ]; then
		echo "Waiting for internet connection .."
		$adb shell dumpsys connectivity | grep "lastValidated{true}" >> /dev/null
		while [ $? -eq 1 ]; do
			$adb shell 'svc wifi disable'
			$adb shell 'svc wifi enable'
			$adb shell dumpsys wifi | grep "CONNECTED/CONNECTED" >> /dev/null
			while [ $? -eq 1 ]; do
				sleep 2
				$adb shell dumpsys wifi | grep "CONNECTED/CONNECTED" >> /dev/null
			done
			sleep 5
			# adb shell dumpsys connectivity | grep "VALIDATED" >> /dev/null
			$adb shell dumpsys connectivity | grep "lastValidated{true}" >> /dev/null
		done
		echo "Internet established"
	fi

	line=$($aapt dump badging $appsFolder$name | grep "package: name")
	semiLine=$(echo $line | cut -d "=" -f 2)
	pack=$(echo $semiLine | cut -d " " -f 1)
	package=$(echo ${pack//\'})

	echo -e "\n(/) Analyzing app: ${RED}"$package"${NC}"
	appFullName=$name
	appName=$package

	#Start the script ..
	$adb shell pm clear $appName > /dev/null
	if [ $? -eq 0 ]; then
		$adb uninstall $appName > /dev/null
	fi
	$adb install $appsFolder$appFullName
	if [ $? -eq 0 ]; then
		$adb shell monkey -p $appName -c android.intent.category.LAUNCHER 1 > /dev/null
		sleep 2
		$adb shell input keyevent 23 > /dev/null
		$adb shell input keyevent 23 > /dev/null
		sleep 2
		$adb shell input keyevent 23 > /dev/null
		$adb shell input keyevent 23 > /dev/null
		sleep 2
		# appID=$($adb shell pidof $appName)
		searchID=$($adb shell ps "|" grep -w $appName)
		arr=($searchID)
		appID=${arr[1]}
		iiid=$(echo $appID |tr '\n' 'a')
		if [ $iiid = "a" ]; then
			echo $appName" Crashed!"
			cptCrashedApps=$((cptCrashedApps+1))
			$adb shell pm clear $appName > /dev/null
			$adb uninstall $appName > /dev/null
			# python3 onlyName.py $name
		else
			# echo -e "${RED}App ID is ${NC}"$appID
			$adb shell strace -p $appID -o $sharedFolder/system.txt &
			sleep 3
			$adb shell monkey --ignore-crashes -p $appName -v 1000 > /dev/null
			$adb shell pm clear $appName > /dev/null
			$adb uninstall $appName > /dev/null
			echo "Application uninstalled."
			$adb pull $sharedFolder/system.txt $filesFolder/ > /dev/null
			echo "File system.txt pulled!"
			$adb shell rm $sharedFolder/system.txt
			# adb shell rm /data/App/system.txt
			# python doEverything.py
			python $scriptsFolder"oneAppSystemcallsToTensor.py" $name
			python $scriptsFolder"predict.py" $name $appName $token
			rm $filesFolder/system.txt
			if [ $? -eq 0 ]; then
				echo "Analysed successfully ^^"
			fi
		fi
	else
		echo "Install failed!"
	fi
}

$adb shell mkdir /data/app/share
startAnalysis
